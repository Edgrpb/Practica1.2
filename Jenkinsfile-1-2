pipeline {
    agent any

    stages {
        stage('Get Code') {
           
            steps {
                echo "Clonando el repositorio..."
                git branch: 'main', url: 'https://github.com/Edgrpb/unir-practicas.git'
                bat 'dir'
                echo WORKSPACE
            }
        }

        stage('Unit') {
            
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE')
                bat '''
                    set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
                                set PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=resultado-Unit.xml test\\unit
        
                '''
                    junit 'resultado-Unit.xml'
            }
        }


        stage('Rest'){
                        steps {
                          catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
                                start cmd /c flask --app app\\api.py run
                                start cmd /c java -jar "C:\\Users\\Edgar\\OneDrive - Anadat Technology\\Escritorio\\Devops\\DevOps & Cloud (PADEVCLO) - PER 11647\\Actividades\\caso practico 1\\wiremock-standalone-3.10.0.jar" --port 9090 --root-dir "C:\\Users\\Edgar\\OneDrive - Anadat Technology\\Escritorio\\Devops\\DevOps & Cloud (PADEVCLO) - PER 11647\\Actividades\\caso practico 1\\helloworld\\test\\wiremock"
                                pytest --junitxml=resultado-Rest.xml test\\rest
                                
                            '''
                          }
                          
                        }
                    }


        stage('Static') {
            
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                bat '''
                    set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
                    python -m flake8 --exit-zero --format=pylint app >flake8.out
                                     
                '''
                //Pintar resultados
                recordIssues tools: [flake8(name: 'flake8', pattern: 'flake8.out')], qualityGates : [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
            }
        }

        stage('Security') {
            
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                bat '''
                set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
                python -m bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                //Pintar resultados
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates : [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
            }
        }

        stage('Performance') {
            
            steps {
                bat '''
                set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
                start cmd /c flask --app app\\api.py run
                "C:\tmp\apache-jmeter-5.6.3\bin\jmeter.bat" -n -t jmeter\\test.jmx -f -l flask.jtl
                '''
                //Pintar resultados
                perfReport sourceDataFiles : 'flask.jtl'

            }
        }

        stage('Coverage') {
                    
                    steps {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                        bat '''
                                echo "Lanzamos pruebas de cobertura"
                                set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
                                python -m coverage run --branch --source=app --omit=app\__init__.py,app\api.py -m pytest test\unit
                                python -m coverage xml
                        '''

                        //Pintar resultados
                        cobertura coberturaReportFile: 'coverage.xml', onlyStable: false,  conditionalCoverageTargets : '90,0,80', lineCoverageTargets : '95,0,85'
                    }

                }
                
        }

    }
}



