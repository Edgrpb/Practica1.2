pipeline {
    agent any

    stages {
        stage('Get Code') {
            steps {
                echo "Clonando el repositorio..."
                git branch: 'main', url: 'https://github.com/Edgrpb/Practica1.2.git'
                bat 'dir'
                echo WORKSPACE
            }
        }

        stage('Unit') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
                        set PYTHONPATH=%WORKSPACE%
                        pytest --junitxml=resultado-Unit.xml test\\unit
                    '''
                }
                junit 'resultado-Unit.xml'
            }
        }

        stage('Rest') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        
                        start cmd /c flask --app app\\api.py run
                        ping -n 5 127.0.0.1
                        start cmd /c java -jar "C:\\Users\\Edgar\\wiremock-standalone-3.10.0.jar" --port 9090 --root-dir "C:\\Users\\Edgar\\helloworld\\test\\wiremock"
                        ping 127.0.0.1 -n 5
                        set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313\\Scripts
                        pytest --junitxml=resultado-Rest.xml test\\rest
                    '''
                }
            }
        }

        stage('Static') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313
                        python -m  flake8 --exit-zero --format=pylint app >flake8.out
                    '''
                }
                recordIssues tools: [flake8(name: 'flake8', pattern: 'flake8.out')], 
                    qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], 
                                   [threshold: 10, type: 'TOTAL', unstable: false]]
            }
        }

        stage('Security') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313
                        python -m bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                    '''
                }
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], 
                    qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], 
                                   [threshold: 4, type: 'TOTAL', unstable: false]]
            }
        }



        stage('Coverage') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        echo "Lanzamos pruebas de cobertura"
                        set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313
                        python -m coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                        python -m coverage xml
                    '''
                }
                cobertura coberturaReportFile: 'coverage.xml', onlyStable: false, 
                          conditionalCoverageTargets: '90,0,80', 
                          lineCoverageTargets: '95,0,85'
            }
        }

                stage('Performance') {
            steps {
                bat '''
                    set PATH=C:\\Users\\Edgar\\AppData\\Local\\Programs\\Python\\Python313\\Scripts
                    start cmd /c flask --app app\\api.py run
                    "C:\\tmp\\apache-jmeter-5.6.3\\bin\\jmeter.bat" -n -t jmeter\\test.jmx -f -l flask.jtl 
                '''
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
    } 
} 
